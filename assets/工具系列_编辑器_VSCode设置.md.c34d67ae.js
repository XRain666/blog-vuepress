import{_ as s,o as a,g as n,O as l}from"./chunks/framework.5b73b90d.js";const e="/XaviDocs/images/工具系列/VSCode设置-1.png",C=JSON.parse('{"title":"VSCode设置","description":"","frontmatter":{},"headers":[],"relativePath":"工具系列/编辑器/VSCode设置.md","lastUpdated":1677761461000}'),p={name:"工具系列/编辑器/VSCode设置.md"},o=l(`<h1 id="vscode设置" tabindex="-1">VSCode设置 <a class="header-anchor" href="#vscode设置" aria-label="Permalink to &quot;VSCode设置&quot;">​</a></h1><p>VSCode是目前前端最常用的编辑器，优点无需多说。这里记录下我使用过程中让VSCode变得更好用的一些理解</p><h2 id="设置级别" tabindex="-1">设置级别 <a class="header-anchor" href="#设置级别" aria-label="Permalink to &quot;设置级别&quot;">​</a></h2><p>VSCode中的设置分为三级，打开项目后会读取每一级别的设置，小区域级别的设置会覆盖大区域级别的设置</p><blockquote><p>项目 &gt; 工作区 &gt; 用户</p></blockquote><h3 id="项目级" tabindex="-1">项目级 <a class="header-anchor" href="#项目级" aria-label="Permalink to &quot;项目级&quot;">​</a></h3><p>也就是项目中<code>.vscode</code>文件夹下的配置文件，需要手动添加，常用的包括：</p><div class="language-Markdown line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Markdown</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> .vscode</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> settings.json 编辑器设置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> extensions.json 扩展应用推荐</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> launch.json 调试设置</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 根目录</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>extensions.json中添加推荐的扩展ID，工程化项目中git提交后可以提醒团队项目成员安装必要的插件。当打开项目编辑器发现有推荐的插件未安装时，会在编辑器右下角提示安装</p><p>格式如下：</p><div class="language-JSON line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">recommendations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue.volar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">unwantedRecommendations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不推荐使用的扩展</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>扩展ID通过 <strong>右击插件 → 复制扩展ID</strong> 获得</p></blockquote><p>settings.json在下文介绍；launch.json会在运行调试后自动生成，更详细的配置本文不做介绍</p><h3 id="工作区" tabindex="-1">工作区 <a class="header-anchor" href="#工作区" aria-label="Permalink to &quot;工作区&quot;">​</a></h3><p>通过 <strong>文件 → 将工作区另存为</strong> 即可保存一个扩展名为<code>.code-workspace</code>的工作区文件，工作区内可以通过 <strong>文件 → 将文件夹添加到工作区</strong> 添加项目。</p><p>一个工作区内可以存在多个项目。例如当手头同时有vue2和vue3的项目时，由于vue2使用vuter，vue3使用volar，每次打开都切换插件很不方便。就可以建立vue2和vue3两个工作区，将同类的项目放至工作区，并针对工作区级别独立设置，这样通过工作区打开项目就无需频繁切换设置</p><blockquote><p>工作区的编辑器设置位于 **设置 → 工作区 **中 插件通过 启用/禁用 旁边的下拉箭头中选择 <strong>启用/禁用(工作区)</strong> 实现仅在当前工作区中开启或关闭该插件（直接点击启用/禁用是全局生效的）</p></blockquote><h3 id="用户" tabindex="-1">用户 <a class="header-anchor" href="#用户" aria-label="Permalink to &quot;用户&quot;">​</a></h3><p>用户级别设置即全局设置，未登录账号时保存在电脑中，登录账号后会自动进行同步</p><blockquote><p>部分教程讲的同步需要通过安装特定插件等复杂操作，但现在只需要在VSCode中登录账号，并打开设置同步就可以了。新环境中登录后会自动同步设置以及安装插件</p></blockquote><h2 id="个性化设置" tabindex="-1">个性化设置 <a class="header-anchor" href="#个性化设置" aria-label="Permalink to &quot;个性化设置&quot;">​</a></h2><p>编辑器设置也就是每一级settings.json中的配置，除了项目级别手动添加外，工作区和用户级别均在设置界面中</p><p>VSCode提供了可视化和源码配置两种设置方式，进入设置界面默认显示可视化配置，可以通过右上角打开设置图标切换为源码视图</p><p>安装Chinese插件后大部分的设置项都有中文说明，除了VSCode自身的设置外，部分插件也会有设置项</p><p>设置项非常庞杂，而且部分说明也没法快速清晰的理解具体效果。所以我个人并不推荐手动修改配置，可以参考<a href="https://antfu.me/" target="_blank" rel="noreferrer">Anthony Fu</a>大佬分享的<a href="https://github.com/antfu/vscode-settings" target="_blank" rel="noreferrer">配置文件</a>，并<strong>在实际使用中根据自身需求再去了解通过什么配置项修改</strong></p><p>界面样式Theme相关，以及字体设置fontFamily需要已安装对应的样式、字体，样式通过在插件中搜索，字体需要自行下载安装</p><p>大佬配置的界面是Mac风格，侧边栏在右边，关闭按钮在选项卡左边，可以自行修改</p><div class="language-JSON line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workbench.sideBar.location</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;font-style:italic;">// 侧边栏位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workbench.editor.tabCloseButton</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;font-style:italic;">// tab关闭按钮位置</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>大佬使用的格式化操作是仅使用eslint，所以关闭了prettier，为什么我会在后文介绍</p><p>可以根据需求选择全局或项目/工作区级别设置中开启prettier</p><div class="language-JSON line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier.enable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;font-style:italic;">// 用户级别中注释该句开启prettier，或在特定的设置级别中设置为true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其他推荐设置：</p><div class="language-JSON line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">editor.linkedEditing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">, </span><span style="color:#676E95;font-style:italic;">// 编辑时自动修改关联的标签，如HTML标签（功能同Auto Rename Tag插件，添加这条配置后这个插件就可以卸载了）</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置中可能有灰色的设置项，显示是未知的配置。可能的情况有：</p><ol><li>该设置项不存在</li><li>仅在其他系统中生效</li><li>属于插件设置项，但并未安装该插件</li></ol><h2 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h2><p>熟悉常用快捷键能大幅度提升编码速度与体验，常用的操作比如：</p><ul><li><p>选择相同单词</p></li><li><p>插入、移动、复制、删除行</p></li><li><p>多光标操作</p></li><li><p>单行、多行注释</p></li><li><p>保存单个、多个文件</p></li><li><p>命令面板</p><p><code>ctrl + shift + p</code>打卡命令面板，通过输入命令的方式执行编辑器或插件提供的操作。例如：</p><ul><li>reload window：重新加载窗口，编辑器卡住或插件未生效时很有用（重新加载不会停止终端中运行的服务）</li><li>sort json（sort package.json）：安装这两个插件后可以选中json代码执行命令，即可完成排序</li></ul></li><li><p>切换文件</p><p><code>ctrl + p</code>打开项目文件目录，能够快速打开最近使用的文件或通过缩写定位文件</p></li><li><p>...</p></li></ul><p>可以参考<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" target="_blank" rel="noreferrer">官方键盘快捷方式参考</a>（帮助 → 键盘快捷方式参考），或者在 左下角管理 → 键盘快捷方式 中查看或修改常用快捷键</p><h2 id="代码片段-snippets" tabindex="-1">代码片段（snippets） <a class="header-anchor" href="#代码片段-snippets" aria-label="Permalink to &quot;代码片段（snippets）&quot;">​</a></h2><p>代码片段也就是通过敲几个字母的缩写，生成所需要的模板，例如Emmet语法就是一种代码片段。VSCode内置的还包括<code>log</code>生成<code>console.log()</code>，<code>!</code>生成基本HTML结构等</p><p>vetur等插件提供代码片段也是通过这种方式，我们可以根据自己的需求自定义代码片段</p><p>通过 <strong>命令面板 → configure user snippets → 新建全局/项目代码片段 → 输入片段名</strong> 即可新建代码片段文件</p><p>文件中的注释说明了代码片段的书写格式以及提供了例子：</p><div class="language-JSONC line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSONC</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 代码片段名字</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Print to console</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 生效文件类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">scope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">javascript,typescript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 触发关键字</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">prefix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">log</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 模板内容</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;$1&#39;);</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 描述</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Log output to console</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><code>$n</code>表示光标占位符，表现形式是可以通过<code>tab键</code>在这些占位符中快速切换。<code>$0</code>比较特殊是最后定位的位置，<code>\${n:placeholder}</code>可以为占位符添加描述，还支持多选项形式<code>\${1|one,two,three|}</code></p><p>body中每一条字符串为一行，支持使用<code>\\n\\t</code>等转义字符，也可以通过<a href="https://snippet-generator.app/" target="_blank" rel="noreferrer">在线工具</a>快速生成snippets</p><p>还有更多的操作，例如使用变量，插入后转换等。不常使用，感兴趣可以参考<a href="https://code.visualstudio.com/docs/%E7%BC%96%E8%BE%91%E5%99%A8/userdefinedsnippets" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="实用功能" tabindex="-1">实用功能 <a class="header-anchor" href="#实用功能" aria-label="Permalink to &quot;实用功能&quot;">​</a></h2><h3 id="npm脚本" tabindex="-1">NPM脚本 <a class="header-anchor" href="#npm脚本" aria-label="Permalink to &quot;NPM脚本&quot;">​</a></h3><p>资源管理器栏中的NPM脚本栏，会自动读取项目package.json中配置的命令，可以在这里快速查看命令并执行</p><p><img src="`+e+'" alt="npm脚本栏"></p><h3 id="源代码管理" tabindex="-1">源代码管理 <a class="header-anchor" href="#源代码管理" aria-label="Permalink to &quot;源代码管理&quot;">​</a></h3><p>侧边栏中提供的git工具，安装了gitlens插件还会有查看提交记录等更多操作</p><p>实现了git常用操作，而且是中文命令，比手敲更快捷稳定</p><p>状态栏左下角会显示当前git分支以及更改数量，点击分支能快速切换分支</p>',56),t=[o];function r(c,i,D,d,u,y){return a(),n("div",null,t)}const b=s(p,[["render",r]]);export{C as __pageData,b as default};
