import{_ as s,o as a,g as n,O as e}from"./chunks/framework.5b73b90d.js";const F=JSON.parse('{"title":"掌握tsconfig.json","description":"","frontmatter":{},"headers":[],"relativePath":"前端系列/工程化/掌握tsconfig.md","lastUpdated":1680095440000}'),o={name:"前端系列/工程化/掌握tsconfig.md"},l=e(`<h1 id="掌握tsconfig-json" tabindex="-1">掌握tsconfig.json <a class="header-anchor" href="#掌握tsconfig-json" aria-label="Permalink to &quot;掌握tsconfig.json&quot;">​</a></h1><p>如果你使用<code>VSCode</code>，通常每个项目根目录下都会有一个<code>jsconfig.json</code>或<code>tsconfig.json</code>文件，那这个文件的作用是什么呢？</p><p>按<a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noreferrer">官方文档</a>的解释来说，<code>jsconfig.json</code>标记该目录是<code>JS</code>项目根目录，并根据内部配置为项目内支持类型的文件提供语言服务（例如<code>api</code>提示、导入路径提示等）</p><p>因为<code>ts</code>文件相关配置无需在<code>js</code>项目中配置，所以官方称<code>jsconfig</code>属于<code>tsconfig</code>的子集，后文中均以<code>tsconfig</code>做说明</p><h2 id="为什么需要" tabindex="-1">为什么需要 <a class="header-anchor" href="#为什么需要" aria-label="Permalink to &quot;为什么需要&quot;">​</a></h2><ol><li>没有<code>tsconfig.json</code>时，<code>VSCode</code>将每个文件都看作独立的单元。只要两个文件间没有通过模块导入语句显示的引用，这两个文件就没有公共的项目上下文</li><li>有<code>tsconfig.json</code>时，配置的属性会作用到项目内的每个文件，例如可以选择性的列出语言服务需要支持哪些文件或不支持哪些文件</li></ol><p>简单来说就是有了<code>tsconfig.json</code>文件后，设置的<code>include</code>、<code>exclude</code>等属性能够约束语言服务的作用范围。例如在<code>a.js</code>中使用<code>console.log(b)</code>时，因为文件上下文中没有<code>b</code>，所以编辑器提供的语言服务会去查找有没有哪一个文件导出了<code>b</code>，如果项目非常巨大的话，全目录查找效率会很低下，这时候就需要<code>tsconfig.json</code>来指定哪部分文件才是需要查找的，从而提高编辑器效率</p><hr><p>另外我们知道可以用<code>typescript</code>库提供的<code>tsc</code>命令编译输出<code>js</code>文件，少量文件编译可以通过参数指定编译选项，但如果编译整个项目则需要利用<code>tsconfig.json</code>来指定编译选项，同时统一编译策略也利于团队协作开发</p><blockquote><p><code>tsc</code>命令行中指定的选项会始终覆盖<code>tsconfig.json</code>中的对应配置</p></blockquote><h2 id="创建文件" tabindex="-1">创建文件 <a class="header-anchor" href="#创建文件" aria-label="Permalink to &quot;创建文件&quot;">​</a></h2><p><code>tsconfig.json</code>文件可以手动创建，在<code>vscode</code>中通过<code>触发建议</code>快捷键即可提示相关属性</p><p><code>tsconfig.json</code>还可以通过<code>tsc init</code>命令生成（需要先安装<code>typescript</code>包），生成的内容只有<code>compilerOptions</code>字段，并开启了几个常用属性，其他属性也通过注释做了详细的解释</p><p><code>tsconfig.json</code>文件可以是个空文件，只要创建了这个文件，所在目录就会被识别为项目根目录，相关属性会使用默认值</p><h2 id="js、ts通用属性" tabindex="-1">JS、TS通用属性 <a class="header-anchor" href="#js、ts通用属性" aria-label="Permalink to &quot;JS、TS通用属性&quot;">​</a></h2><h3 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h3><p>指定允许被识别的文件或文件夹列表，运行使用通配符：</p><ul><li><code>*</code>匹配0个或多个字符（不包括目录分隔符）</li><li><code>?</code>匹配任意一个字符（不包括目录分隔符）</li><li><code>**/</code>匹配任意一级或多级目录</li></ul><p>如果路径某一部分只包含<code>*</code>或<code>.*</code>，那么这部分只会匹配支持的扩展名（<code>.ts</code>、<code>.tsx</code>、<code>.d.ts</code>，如果设置了<code>allowJs</code>则还包括<code>.js</code>和<code>.jsx</code>）</p><h3 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h3><p>指定允许被识别的文件列表，如果找不到对应文件会报错</p><p>用于只有少量文件需要被识别时取代<code>include</code>，<code>files</code>与<code>include</code>也可以同时存在。另外<code>files</code>指定的文件不会被<code>exclude</code>排除</p><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><p>指定不应该被识别的文件或文件夹列表，同样可以使用通配符</p><p><code>exclude</code>会默认排除<code>node_modules</code>、<code>bowser_components</code>、<code>jspm_packages</code>和<code>outDir</code>属性指定的目录</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>未指定时，<code>include</code>默认值为<code>[&quot;**/*&quot;]</code>；<code>files</code>、<code>exclude</code>默认为<code>[]</code></p></div><h3 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./anotherConfig.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>继承另一个配置文件中的配置，路径匹配规则采用<code>NodeJS</code>匹配规则（<a href="/XaviDocs/前端系列/工程化/JS模块化原理#模块匹配规则">JS模块化原理</a>中有详细说明）。主配置文件中的配置属性会覆盖<code>extends</code>指定文件中的属性，对象中的不同属性会合并后作为完整的配置。多个配置文件不能通过<code>extends</code>属性循环引用</p><p>需要注意<code>files</code>、<code>include</code>、<code>exclude</code>字段不会发生合并，优先使用主配置文件中的配置</p><h3 id="watchoptions" tabindex="-1">watchOptions <a class="header-anchor" href="#watchoptions" aria-label="Permalink to &quot;watchOptions&quot;">​</a></h3><h3 id="vuecompileroptions" tabindex="-1">vueCompilerOptions <a class="header-anchor" href="#vuecompileroptions" aria-label="Permalink to &quot;vueCompilerOptions&quot;">​</a></h3><h2 id="ts相关属性" tabindex="-1">TS相关属性 <a class="header-anchor" href="#ts相关属性" aria-label="Permalink to &quot;TS相关属性&quot;">​</a></h2><h3 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h3><p><code>compilerOptions</code>是<code>TS</code>配置的主要部分</p><h4 id="allowunreachablecode" tabindex="-1">allowUnreachableCode <a class="header-anchor" href="#allowunreachablecode" aria-label="Permalink to &quot;allowUnreachableCode&quot;">​</a></h4><p>定义如何处理不会被访问到的代码，默认<code>undefined</code>表示展示警告，还支持<code>true</code>表示忽略，<code>false</code>表示报错。例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 下面的代码永远不会被执行到</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="allowunusedlabels" tabindex="-1">allowUnusedLabels <a class="header-anchor" href="#allowunusedlabels" aria-label="Permalink to &quot;allowUnusedLabels&quot;">​</a></h4><p>定义如何处理未使用的标签，规则同<code>allowUnreachableCode</code>。标签语法并不常用，若不了解可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/label" target="_blank" rel="noreferrer">MDN文档</a></p><h4 id="exactoptionalpropertytypes" tabindex="-1">exactOptionalPropertyTypes <a class="header-anchor" href="#exactoptionalpropertytypes" aria-label="Permalink to &quot;exactOptionalPropertyTypes&quot;">​</a></h4><p>是否需要精确定义可选属性类型。默认<code>TS</code>可选属性可以为<code>undefined</code>，如果开启此选项则不会默认支持<code>undefined</code></p><h4 id="nofallthroughcasesinswitch" tabindex="-1">noFallthroughCasesInSwitch <a class="header-anchor" href="#nofallthroughcasesinswitch" aria-label="Permalink to &quot;noFallthroughCasesInSwitch&quot;">​</a></h4><p>是否需要<code>switch</code>语句中每个非空<code>case</code>都包含<code>break</code>或<code>return</code></p><h4 id="noimplicitoverride" tabindex="-1">noImplicitOverride <a class="header-anchor" href="#noimplicitoverride" aria-label="Permalink to &quot;noImplicitOverride&quot;">​</a></h4><p>开启后子类重写父类方法必须添加<code>override</code>关键字:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Son</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="noimplicitreturns" tabindex="-1">noImplicitReturns <a class="header-anchor" href="#noimplicitreturns" aria-label="Permalink to &quot;noImplicitReturns&quot;">​</a></h4><p>启用后将严格检查函数是否有明确的返回值（默认的返回<code>undefined</code>会报错）</p><h4 id="nopropertyaccessfromindexsignature" tabindex="-1">noPropertyAccessFromIndexSignature <a class="header-anchor" href="#nopropertyaccessfromindexsignature" aria-label="Permalink to &quot;noPropertyAccessFromIndexSignature&quot;">​</a></h4><p>开启后将不能用点语法(<code>obj.attr</code>)访问对象中通过索引定义的属性：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开启noPropertyAccessFromIndexSignature后将报错</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 属性“b”来自索引签名，因此必须使用[“b”]访问它。ts(4111)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="nouncheckedindexedaccess" tabindex="-1">noUncheckedIndexedAccess <a class="header-anchor" href="#nouncheckedindexedaccess" aria-label="Permalink to &quot;noUncheckedIndexedAccess&quot;">​</a></h4><p>开启后</p><h4 id="nounusedlocals" tabindex="-1">noUnusedLocals <a class="header-anchor" href="#nounusedlocals" aria-label="Permalink to &quot;noUnusedLocals&quot;">​</a></h4><p>开启后未使用的局部变量会报错</p><h4 id="nounusedparameters" tabindex="-1">noUnusedParameters <a class="header-anchor" href="#nounusedparameters" aria-label="Permalink to &quot;noUnusedParameters&quot;">​</a></h4><p>开启后未使用的函数参数会报错</p><h4 id="alwaysstrict" tabindex="-1">alwaysStrict <a class="header-anchor" href="#alwaysstrict" aria-label="Permalink to &quot;alwaysStrict&quot;">​</a></h4><p>是否将每个文件都看作开启严格模式(<code>use strict</code>)，在<code>ESModule</code>文件中会默认开启，具体规则可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noreferrer">MDN文档</a></p><h4 id="strictbindcallapply" tabindex="-1">strictBindCallApply <a class="header-anchor" href="#strictbindcallapply" aria-label="Permalink to &quot;strictBindCallApply&quot;">​</a></h4><p>开启后将检查<code>call</code>、<code>apply</code>、<code>bind</code>中的参数类型是否与原函数定义的类型一致</p><h4 id="strictfunctiontypes" tabindex="-1">strictFunctionTypes <a class="header-anchor" href="#strictfunctiontypes" aria-label="Permalink to &quot;strictFunctionTypes&quot;">​</a></h4><p>开启后将使函数参数类型检查更加准确，例如一个更精确的函数类型不能赋值给类型的扩展集：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringOrNumberFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Unsafe assignment is prevented</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> func</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringOrNumberFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="strictnullchecks" tabindex="-1">strictNullChecks <a class="header-anchor" href="#strictnullchecks" aria-label="Permalink to &quot;strictNullChecks&quot;">​</a></h4><p>开启后<code>null</code>和<code>undefined</code>将看作具体的类型，而不会默认为其他类型的子类型</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认null和undefined可以赋值给其他类型，开启strictNullChecks后将会报错</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 未开启strictNullChecks时b的类型别识别为string</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开启后会识别为string|undefined</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> item </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="strictpropertyinitialization" tabindex="-1">strictPropertyInitialization <a class="header-anchor" href="#strictpropertyinitialization" aria-label="Permalink to &quot;strictPropertyInitialization&quot;">​</a></h4><p>开启后如果类中声明了类属性，但未在构造函数中设置该属性时会报错</p><h4 id="noimplicitany" tabindex="-1">noImplicitAny <a class="header-anchor" href="#noimplicitany" aria-label="Permalink to &quot;noImplicitAny&quot;">​</a></h4><p>是否允许不明确类型的变量存在。例如函数参数如果未指定类型，<code>TS</code>会将类型看作<code>any</code>，该属性定义是否允许这种默认的回退类型行为</p><h4 id="noimplicitthis" tabindex="-1">noImplicitThis <a class="header-anchor" href="#noimplicitthis" aria-label="Permalink to &quot;noImplicitThis&quot;">​</a></h4><p>开启后对<code>this</code>类型无法识别时（隐式<code>any</code>类型）会报错，例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outputName</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 这个函数中的this在调用时才能确定，而不是Name类，会报错</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="useunknownincatchvariables" tabindex="-1">useUnknownInCatchVariables <a class="header-anchor" href="#useunknownincatchvariables" aria-label="Permalink to &quot;useUnknownInCatchVariables&quot;">​</a></h4><p>开启后<code>catch</code>中的错误类型会由<code>any</code>改为<code>unknown</code></p><h4 id="strict" tabindex="-1">strict <a class="header-anchor" href="#strict" aria-label="Permalink to &quot;strict&quot;">​</a></h4><p>开启严格模式，截至<code>TS 4.3</code>开启<code>strict</code>选项相当于开启了如下的八个编译选项：</p><ol><li>alwaysStrict</li><li>strictBindCallApply</li><li>strictFunctionTypes</li><li>strictNullChecks</li><li>strictPropertyInitialization</li><li>noImplicitAny</li><li>noImplicitThis</li><li>useUnknownInCatchVariables</li></ol><p>设置<code>strict: true</code>后，这些选项也可以单独设置</p><h4 id="allowumdglobalaccess" tabindex="-1">allowUmdGlobalAccess <a class="header-anchor" href="#allowumdglobalaccess" aria-label="Permalink to &quot;allowUmdGlobalAccess&quot;">​</a></h4><p>开启后允许以全局变量的形式访问<code>UMD</code>模块导出</p><h4 id="baseurl" tabindex="-1">baseUrl <a class="header-anchor" href="#baseurl" aria-label="Permalink to &quot;baseUrl&quot;">​</a></h4><p>定义相对路径解析时相对的基准目录</p><p>默认为<code>./</code>即相对于根目录，例如设置为<code>src/</code>后，项目内的相对路径将从<code>src</code>开始查找</p><h4 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h4><p>定义项目使用的模块系统，支持<code>CommonJS</code>, <code>AMD</code>, <code>System</code>, <code>UMD</code>, <code>ES6</code>, <code>ES2015</code>, <code>ES2020</code>, <code>ESNext</code>, <code>None</code>, <code>ES2022</code>, <code>Node16</code>, <code>NodeNext</code></p><p>一般只需要设置为<code>CommonJS</code>或<code>ESNext</code>，这个属性决定了<code>ts</code>文件编译后代码需要将模块化语句转换为何种模块化格式</p><h4 id="moduleresolution" tabindex="-1">moduleResolution <a class="header-anchor" href="#moduleresolution" aria-label="Permalink to &quot;moduleResolution&quot;">​</a></h4><p>定义编译器查找模块导入文件的策略，支持<code>Classic</code>或<code>Node</code>。未指定时如果使用了<code>module</code>为<code>AMD</code>或<code>System</code>或<code>ES2015</code>时为<code>Classic</code>，其他情况视为<code>Node</code></p><p><code>Classic</code>策略是早期<code>TS</code>默认的解析策略：相对导入时会依次查找相对目录下的<code>.ts</code>、<code>.d.ts</code>文件；非相对导入时会从当前目录依次遍历至根目录（<code>baseUrl</code>）查找<code>.ts</code>、<code>.d.ts</code>文件</p><p><code>Node</code>策略是模仿<code>NodeJS</code>的模块解析机制，在<a href="/XaviDocs/前端系列/工程化/JS模块化原理#模块匹配规则">JS模块化原理</a>中有详细介绍，不同的是<code>TS</code>项目增加了扩展名的支持(<code>.ts</code>、<code>.tsx</code>、<code>.d.ts</code>，如果设置了<code>allowJs</code>则还包括<code>.js</code>和<code>.jsx</code>)</p><h4 id="modulesuffixes" tabindex="-1">moduleSuffixes <a class="header-anchor" href="#modulesuffixes" aria-label="Permalink to &quot;moduleSuffixes&quot;">​</a></h4><p>用于在解析模块时添加默认后缀名进行搜索，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">moduleSuffixes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.ios</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.native</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时会按照<code>foo.ios.ts</code>、<code>foo.native.ts</code>、<code>foo.ts</code>的顺序进行搜索（此处省略了<code>tsx</code>等扩展名替换步骤）</p><h4 id="noresolve" tabindex="-1">noResolve <a class="header-anchor" href="#noresolve" aria-label="Permalink to &quot;noResolve&quot;">​</a></h4><h3 id="buildoptions" tabindex="-1">buildOptions <a class="header-anchor" href="#buildoptions" aria-label="Permalink to &quot;buildOptions&quot;">​</a></h3><h3 id="compileonsave" tabindex="-1">compileOnSave <a class="header-anchor" href="#compileonsave" aria-label="Permalink to &quot;compileOnSave&quot;">​</a></h3><h3 id="references" tabindex="-1">references <a class="header-anchor" href="#references" aria-label="Permalink to &quot;references&quot;">​</a></h3><h3 id="typeacquisition" tabindex="-1">typeAcquisition <a class="header-anchor" href="#typeacquisition" aria-label="Permalink to &quot;typeAcquisition&quot;">​</a></h3><h3 id="ts-node" tabindex="-1">ts-node <a class="header-anchor" href="#ts-node" aria-label="Permalink to &quot;ts-node&quot;">​</a></h3>`,103),c=[l];function p(t,r,i,d,y,u){return a(),n("div",null,c)}const h=s(o,[["render",p]]);export{F as __pageData,h as default};
